nameOverride: argocd
fullnameOverride: ""
kubeVersionOverride: ""
apiVersionOverrides:
  certmanager: "" # cert-manager.io/v1
  ingress: networking.k8s.io/v1 # networking.k8s.io/v1beta1
  autoscaling: "" # autoscaling/v2

createAggregateRoles: false

openshift:
  enabled: false

crds:
  install: true
  keep: true
  annotations: {}

global:
  image:
    repository: quay.io/argoproj/argocd
    tag: ""
    imagePullPolicy: IfNotPresent
  logging:
    format: text
    level: info
  podAnnotations: {}
  podLabels: {}
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    runAsNonRoot: true
  imagePullSecrets: []
  hostAliases: []

  additionalLabels: {}

  networkPolicy:
    create: false
    defaultDenyIngress: false

configs:
  clusterCredentials:

  gpgKeysAnnotations: {}
  gpgKeys: {}

  knownHostsAnnotations: {}
  knownHosts:
    data:
      ssh_known_hosts: |
        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
        github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
  tlsCertsAnnotations: {}
  tlsCerts:
    {}

  credentialTemplates: {}

  credentialTemplatesAnnotations: {}

  repositories:
    vault-helm-repo:
      url: https://helm.releases.hashicorp.com
      name: hashicorp
      type: helm
    external-secrets:
      url: https://charts.external-secrets.io
      name: external-secrets
      type: helm

  repositoriesAnnotations: {}

  secret:
    createSecret: true
    annotations: {}

    githubSecret: ""
    gitlabSecret: ""
    bitbucketServerSecret: ""
    bitbucketUUID: ""
    gogsSecret: ""

    extra:
      {}

    argocdServerTlsConfig:
      {}

    argocdServerAdminPassword: ""
    argocdServerAdminPasswordMtime: ""

  styles: ""

  params:
    annotations: {}

    otlp.address: ''
    timeout.reconciliation: 180
    timeout.hard.reconciliation: 0

    controller.status.processors: 20
    controller.operation.processors: 10
    controller.self.heal.timeout.seconds: 5
    controller.repo.server.timeout.seconds: 60

    server.insecure: true
    server.basehref: /
    server.rootpath: ''
    server.staticassets: /shared/app
    server.disable.auth: false
    server.enable.gzip: false
    server.x.frame.options: sameorigin

    reposerver.parallelism.limit: 0

extraObjects: []

controller:
  name: application-controller

  image:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  replicas: 1

  args: {}



  extraArgs: []

  env: []

  envFrom: []

  podAnnotations: {}

  podLabels: {}

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  containerPort: 8082

  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  volumeMounts: []
  volumes: []

  service:
    annotations: {}
    labels: {}
    port: 8082
    portName: https-controller

  nodeSelector: {}
  tolerations: []
  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: ""

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  serviceAccount:
    create: true
    name: argocd-application-controller
    annotations: {}
    automountServiceAccountToken: true

  metrics:
    enabled: false
    applicationLabels:
      enabled: false
      labels: []
    service:
      annotations: {}
      labels: {}
      servicePort: 8082
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: "" # "monitoring"
      additionalLabels: {}
    rules:
      enabled: false
      spec: []

  clusterAdminAccess:
    enabled: true

  clusterRoleRules:
    enabled: false
    rules: []

  extraContainers: []

  initContainers: []

  pdb:
    labels: {}
    annotations: {}

    enabled: false

  imagePullSecrets: []

dex:
  enabled: false
  name: dex-server

  extraArgs: []

  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: "" # "monitoring"
      additionalLabels: {}

  image:
    repository: ghcr.io/dexidp/dex
    tag: v2.32.0
    imagePullPolicy: ""
  initImage:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  env: []

  envFrom: []

  podAnnotations: {}

  podLabels: {}

  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 1

  serviceAccount:
    create: true
    name: argocd-dex-server
    annotations: {}
    automountServiceAccountToken: true

  volumeMounts: []

  volumes: []

  containerPortHttp: 5556
  servicePortHttp: 5556
  servicePortHttpName: http
  containerPortGrpc: 5557
  servicePortGrpc: 5557
  servicePortGrpcName: grpc
  containerPortMetrics: 5558
  servicePortMetrics: 5558

  nodeSelector: {}
  tolerations: []
  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: ""

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  resources:
    limits:
      cpu: 50m
      memory: 64Mi
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []

  initContainers: []

  pdb:
    labels: {}
    annotations: {}

    enabled: false

  imagePullSecrets: []

redis:
  enabled: true
  name: redis

  image:
    repository: public.ecr.aws/docker/library/redis
    tag: 7.0.4-alpine
    imagePullPolicy: IfNotPresent

  extraArgs: []

  containerPort: 6379
  servicePort: 6379

  env: []

  envFrom: []

  podAnnotations: {}

  podLabels: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: ""

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 999

  securityContext:
    runAsNonRoot: true
    runAsUser: 999

  serviceAccount:
    create: true
    name: "argocd-redis"
    annotations: {}
    automountServiceAccountToken: false

  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

  volumeMounts: []
  volumes: []

  extraContainers: []

  initContainers: []

  service:
    annotations: {}
    labels: {}

  metrics:
    enabled: false
    image:
      repository: public.ecr.aws/bitnami/redis-exporter
      tag: 1.26.0-debian-10-r2
      imagePullPolicy: IfNotPresent
    containerPort: 9121
    resources: {}
    service:
      type: ClusterIP
      clusterIP: None
      annotations: {}
      labels: {}
      servicePort: 9121
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: "" # "monitoring"
      additionalLabels: {}

  pdb:
    labels: {}
    annotations: {}

    enabled: false

  imagePullSecrets: []

redis-ha:
  enabled: false
  exporter:
    enabled: true
  persistentVolume:
    enabled: false
  redis:
    masterGroupName: argocd
    config:
      save: '""'
  haproxy:
    enabled: true
    metrics:
      enabled: true
  image:
    tag: 7.0.4-alpine

  topologySpreadConstraints:
    enabled: false
    maxSkew: ""
    topologyKey: ""
    whenUnsatisfiable: ""

externalRedis:
  host: ""
  username: ""
  password: ""
  port: 6379
  existingSecret: ""
  secretAnnotations: {}

server:
  name: server

  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior: {}
  image:
    repository: "" # defaults to global.image.repository
    tag: "" # defaults to global.image.tag
    imagePullPolicy: "" # IfNotPresent

  extraArgs: []

  env: []

  envFrom: []

  lifecycle: {}


  podAnnotations: {}

  podLabels: {}

  containerPort: 8080

  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  volumeMounts: []

  volumes: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: ""

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

  certificate:
    enabled: false
    domain: argocd.example.com
    duration: ""
    renewBefore: ""
    privateKey:
      rotationPolicy: Never
      encoding: PKCS1
      algorithm: RSA
      size: 2048
    issuer:
      group: ""
      kind: ""
      name: ""
    additionalHosts: []
    secretName: argocd-server-tls

  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30080
    nodePortHttps: 30443
    servicePortHttp: 80
    servicePortHttps: 443
    servicePortHttpName: http
    servicePortHttpsName: https
    namedTargetPort: true
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: ""
    sessionAffinity: ""

  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      servicePort: 8083
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: ""  # monitoring
      additionalLabels: {}

  serviceAccount:
    create: true
    name: argocd-server
    annotations: {}
    automountServiceAccountToken: true

  ingress:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      kubernetes.io/ingress.class: "ingress-nginx"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    labels: {}
    hosts:
      - d116-2804-14d-32a5-843e-ce32-a55d-4ba9-2918.sa.ngrok.io
    paths:
      - /
    pathType: Prefix
    extraPaths:
      []

    tls:
      []

    https: false

  ingressGrpc:
    enabled: false
    isAWSALB: false
    annotations: {}
    labels: {}
    ingressClassName: ""

    awsALB:
      serviceType: NodePort
      backendProtocolVersion: HTTP2

    hosts:
      []

    paths:
      - /
    pathType: Prefix
    extraPaths:
      []

    tls:
      []

    https: false

  route:
    enabled: false
    annotations: {}
    hostname: ""
    termination_type: passthrough
    termination_policy: None

  configEnabled: true
  config:
    application.instanceLabelKey: argocd.argoproj.io/instance

    server.rbac.log.enforce.enable: "false"

    exec.enabled: "false"

    admin.enabled: "true"
    url: http://localhost:8080
    oidc.config: |
      name: Auth0
      issuer: https://<TENANT>.<REGION>.auth0.com/
      clientID: "ClientID"
      clientSecret: "ClientSecret"
      requestedScopes:
        - openid
        - profile
        - email
  configAnnotations: {}

  rbacConfig:
    policy.csv: |
      g, argo-admins, role:readonly
    scopes: '[https://example.com/claims/groups, email]'
  rbacConfigAnnotations: {}

  rbacConfigCreate: true

  clusterAdminAccess:
    enabled: true

  GKEbackendConfig:
    enabled: false
    spec: {}

  GKEmanagedCertificate:
    enabled: false
    domains:
    - argocd.example.com

  GKEfrontendConfig:
    enabled: false
    spec: {}

  extraContainers: []

  initContainers: []

  extensions:
    enabled: false

    image:
      repository: "ghcr.io/argoproj-labs/argocd-extensions"
      tag: "v0.1.0"
      imagePullPolicy: IfNotPresent

    resources: {}

    contents: []

  pdb:
    labels: {}
    annotations: {}

    enabled: false

  imagePullSecrets: []

repoServer:
  name: repo-server

  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior: {}

  image:
    repository: "" # defaults to global.image.repository
    tag: "" # defaults to global.image.tag
    imagePullPolicy: "" # IfNotPresent

  extraArgs: []

  env: []

  envFrom: []


  podAnnotations: {}

  podLabels: {}

  containerPort: 8081

  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  volumeMounts: []

  volumes: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: ""

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

  service:
    annotations: {}
    labels: {}
    port: 8081
    portName: https-repo-server

  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      servicePort: 8084
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: "" # "monitoring"
      additionalLabels: {}

  clusterAdminAccess:
    enabled: false
  clusterRoleRules:
    enabled: false
    rules: []

  serviceAccount:
    create: true
    name: "" # "argocd-repo-server"
    annotations: {}
    automountServiceAccountToken: true

  extraContainers: []

  rbac: []

  copyutil:
    resources: {}

  initContainers: []

  pdb:
    labels: {}
    annotations: {}

    enabled: false

  imagePullSecrets: []

applicationSet:
  enabled: true

  name: applicationset-controller

  replicaCount: 1

  image:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  args:
    metricsAddr: :8080
    probeBindAddr: :8081
    enableLeaderElection: false
    policy: sync
    debug: false
    dryRun: false

  logFormat: ""
  logLevel: ""

  extraContainers: []

  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      servicePort: 8085
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}

      scheme: ""
      tlsConfig: {}
      namespace: ""  # monitoring
      additionalLabels: {}

  imagePullSecrets: []

  service:
    annotations: {}
    labels: {}
    port: 7000
    portName: webhook

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityContext: {}

  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  priorityClassName: ""

  extraVolumeMounts: []

  extraVolumes: []

  extraArgs: []

  extraEnv: []

  extraEnvFrom: []

  webhook:
    ingress:
      enabled: false
      annotations: {}
      labels: {}
      ingressClassName: ""

      hosts: []

      paths:
        - /api/webhook
      pathType: Prefix
      extraPaths: []

      tls: []

notifications:
  enabled: true

  name: notifications-controller

  affinity: {}

  argocdUrl:

  image:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  imagePullSecrets: []

  nodeSelector: {}

  updateStrategy:
    type: Recreate

  context: {}

  secret:
    create: true

    annotations: {}

    items: {}




  logFormat: ""
  logLevel: ""

  extraArgs: []

  extraEnv: []

  extraVolumeMounts: []

  extraVolumes: []

  metrics:
    enabled: false
    port: 9001
    service:
      annotations: {}
      labels: {}
      portName: http-metrics
    serviceMonitor:
      enabled: false
      selector: {}
      additionalLabels: {}
      scheme: ""
      tlsConfig: {}

  notifiers: {}

  podAnnotations: {}

  podLabels: {}

  securityContext:
    runAsNonRoot: true

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  priorityClassName: ""

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

  serviceAccount:
    create: true

    name: argocd-notifications-controller

    annotations: {}

  cm:
    create: true

  subscriptions: []

  templates: {}

  tolerations: []

  triggers: {}

  bots:
    slack:
      enabled: false

      updateStrategy:
        type: Recreate

      image:
        repository: ""
        tag: ""
        imagePullPolicy: ""

      imagePullSecrets: []

      service:
        annotations: {}
        port: 80
        type: LoadBalancer

      serviceAccount:
        create: true

        name: argocd-notifications-bot

        annotations: {}

      securityContext:
        runAsNonRoot: true

      containerSecurityContext: {}

      resources: {}

      affinity: {}

      tolerations: []

      nodeSelector: {}
